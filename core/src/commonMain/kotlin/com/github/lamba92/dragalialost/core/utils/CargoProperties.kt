package com.github.lamba92.dragalialost.core.utils

import com.github.lamba92.dragalialost.data.rawresponses.*

object CargoProperties {
    inline fun <reified T : CargoQueryable> of() = when (T::class) {
        AdventurerJSON::class -> listOf(
            "Abilities11",
            "Abilities12",
            "Abilities13",
            "Abilities14",
            "Abilities21",
            "Abilities22",
            "Abilities23",
            "Abilities24",
            "Abilities31",
            "Abilities32",
            "Abilities33",
            "Abilities34",
            "Availability",
            "CharaType",
            "DefCoef",
            "Description",
            "ElementalType",
            "ElementalTypeId",
            "EnglishCV",
            "ExAbilityData1",
            "ExAbilityData2",
            "ExAbilityData3",
            "ExAbilityData4",
            "ExAbilityData5",
            "FullName",
            "Gender",
            "Id",
            "IdLong",
            "IsPlayable",
            "JapaneseCV",
            "ManaCircleName",
            "MaxAtk",
            "MaxFriendshipPoint",
            "MaxHp",
            "McFullBonusAtk5",
            "McFullBonusHp5",
            "MinAtk3",
            "MinAtk4",
            "MinAtk5",
            "MinDef",
            "MinHp3",
            "MinHp4",
            "MinHp5",
            "Name",
            "NameJP",
            "NameSC",
            "NameTC",
            "Obtain",
            "PlusAtk0",
            "PlusAtk1",
            "PlusAtk2",
            "PlusAtk3",
            "PlusAtk4",
            "PlusHp0",
            "PlusHp1",
            "PlusHp2",
            "PlusHp3",
            "PlusHp4",
            "Race",
            "Rarity",
            "ReleaseDate",
            "Skill1Name",
            "Skill2Name",
            "Title",
            "TitleJP",
            "TitleSC",
            "TitleTC",
            "VariationId",
            "WeaponType",
            "WeaponTypeId",
            "Skill1ID",
            "Skill2ID"
        )
        DragonJSON::class -> listOf(
            "BaseId",
            "Id",
            "Name",
            "FullName",
            "NameJP",
            "Title",
            "TitleJP",
            "Obtain",
            "Rarity",
            "ElementalType",
            "ElementalTypeId",
            "VariationId",
            "IsPlayable",
            "MinHp",
            "MaxHp",
            "MinAtk",
            "MaxAtk",
            "Skill1",
            "SkillName",
            "SkillDescription",
            "Abilities11",
            "Abilities12",
            "Abilities21",
            "Abilities22",
            "ProfileText",
            "FavoriteType",
            "JapaneseCV",
            "EnglishCV",
            "SellCoin",
            "SellDewPoint",
            "MoveSpeed",
            "DashSpeedRatio",
            "TurnSpeed",
            "IsTurnToDamageDir",
            "MoveType",
            "IsLongRange",
            "ReleaseDate",
            "Availability"
        )
        WyrmprintJSON::class -> listOf(
            "Id",
            "BaseId",
            "Name",
            "NameJP",
            "Rarity",
            "AmuletType",
            "MinHp",
            "MaxHp",
            "MinAtk",
            "MaxAtk",
            "VariationId",
            "Abilities11",
            "Abilities12",
            "Abilities13",
            "Abilities21",
            "Abilities22",
            "Abilities23",
            "Abilities31",
            "Abilities32",
            "Abilities33",
            "ArtistCV",
            "FlavorText1",
            "FlavorText2",
            "FlavorText3",
            "FlavorText4",
            "FlavorText5",
            "IsPlayable",
            "SellCoin",
            "SellDewPoint",
            "ReleaseDate",
            "FeaturedCharacters",
            "Obtain",
            "Availability"
        )
        AbilityJSON::class -> listOf(
            "Id",
            "GenericName",
            "Name",
            "Details",
            "AbilityIconName",
            "AbilityGroup",
            "PartyPowerWeight",
            "AbilityLimitedGroupId1",
            "AbilityLimitedGroupId2",
            "AbilityLimitedGroupId3"
        )
        CoAbilityJSON::class -> listOf(
            "Id",
            "GenericName",
            "Name",
            "Details",
            "AbilityIconName",
            "Category",
            "PartyPowerWeight"
        )
        WeaponJSON::class -> listOf(
            "Id",
            "BaseId",
            "FormId",
            "WeaponName",
            "WeaponNameJP",
            "Type",
            "TypeId",
            "Rarity",
            "ElementalType",
            "ElementalTypeId",
            "MinHp",
            "MaxHp",
            "MinAtk",
            "MaxAtk",
            "VariationId",
            "Skill",
            "SkillName",
            "SkillDesc",
            "Abilities11",
            "Abilities21",
            "IsPlayable",
            "FlavorText",
            "SellCoin",
            "SellDewPoint",
            "ReleaseDate",
            "CraftNodeId",
            "ParentCraftNodeId",
            "CraftGroupId",
            "FortCraftLevel",
            "AssembleCoin",
            "DisassembleCoin",
            "DisassembleCost",
            "MainWeaponId",
            "MainWeaponQuantity",
            "CraftMaterialType1",
            "CraftMaterial1",
            "CraftMaterialQuantity1",
            "CraftMaterialType2",
            "CraftMaterial2",
            "CraftMaterialQuantity2",
            "CraftMaterialType3",
            "CraftMaterial3",
            "CraftMaterialQuantity3",
            "CraftMaterialType4",
            "CraftMaterial4",
            "CraftMaterialQuantity4",
            "CraftMaterialType5",
            "CraftMaterial5",
            "CraftMaterialQuantity5",
            "Obtain",
            "Availability",
            "AvailabilityId"
        )
        SkillJSON::class -> listOf(
            "CrisisModifier",
            "Description1",
            "Description2",
            "Description3",
            "Description4",
            "IframeDuration",
            "IsAffectedByTension",
            "Name",
            "SkillId",
            "MaxSkillLevel",
            "SkillLv1IconName",
            "SkillLv2IconName",
            "SkillLv3IconName",
            "SkillLv4IconName",
            "Sp",
            "SPLv2",
            "SpRegen",
            "MaxAmmo",
            "AmmoUsage"
        )
        AbilityLimitedGroupJSON::class -> listOf(
            "Id",
            "IsEffectMix",
            "MaxLimitedValue",
            "AbilityLimitedText"
        )
        AbilityGroupJSON::class -> listOf(
            "Id",
            "GroupName"
        )
        else -> throw IllegalArgumentException("${T::class.simpleName} properties have not been listed")
    }

    inline fun <reified T : CargoQueryable> idOf() = when (T::class) {
        AdventurerJSON::class -> listOf("Id", "VariationId")
        WyrmprintJSON::class, DragonJSON::class, AbilityJSON::class,
        CoAbilityJSON::class, AbilityLimitedGroupJSON::class
        -> listOf("Id")
        WeaponJSON::class -> listOf("Id", "FormId")
        SkillJSON::class -> listOf("SkillId")
        else -> throw IllegalArgumentException("${T::class.simpleName} Id has not been declared")
    }

//    inline fun <reified T : CargoQueryable> nameOf() = when (T::class) {
//        AdventurerJSON::class -> "FullName"
//        else -> "Name"
//    }

    inline fun <reified T : CargoQueryable> nameOf() = "Name"
}
